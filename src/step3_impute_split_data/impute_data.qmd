---
title: 'Data Imputation'
author: 'Mingcheng Hu'
format: 
    pdf:
        toc: true
        keep-tex: true
        include-in-header: 
            text: |
                \usepackage{fvextra}
                \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
                \DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\{\}}
---

# Import and Preprocess Data

```{r}
library(mice)
library(missForest)
library(ggplot2)
library(dplyr)
library(corrplot)
options(scipen = 999)  # disable scientific notation
```

```{r}
data_raw <- read.csv("/work/users/y/u/yuukias/BIOS-Material/BIOS992/src/step1_impute_data/data_raw.csv")
dim(data_raw)
```

```{r}
head(data_raw)
```



For some variables, there are "prefer not to answer" or "do not know" options. We need to set them as NA.


```{r}
data <- data_raw

print(paste("Smoking: ", sum(data$smoking == -3, na.rm = TRUE), "/", nrow(data)))
data$smoking[data$smoking == -3] <- NA                   # 20116-0.0

print(paste("Diabetes: ", sum(data$diabetes %in% c(-1, -3), na.rm = TRUE), "/", nrow(data)))
data$diabetes[data$diabetes %in% c(-1, -3)] <- NA        # 2443-0.0

print(paste("Ethnicity: ", sum(data$ethnicity %in% c(-1, -3), na.rm = TRUE), "/", nrow(data)))
data$ethnicity[data$ethnicity %in% c(-1, -3)] <- NA      # 21000-0.0

print(paste("Medication for Males: ", sum(data$med_male %in% c(-1, -3), na.rm = TRUE), "/", nrow(data)))
data$med_male[data$med_male %in% c(-1, -3)] <- NA       # 6177-0.0

print(paste("Medication for Females: ", sum(data$med_female %in% c(-1, -3), na.rm = TRUE), "/", nrow(data)))
data$med_female[data$med_female %in% c(-1, -3)] <- NA   # 6153-0.0

print(paste("Diagnosis: ", sum(data$diagnosis == -3, na.rm = TRUE), "/", nrow(data)))
data$diagnosis[data$diagnosis == -3] <- NA               # 6150-0.0

print(paste("Education: ", sum(data$education == -3, na.rm = TRUE), "/", nrow(data)))
data$education[data$education == -3] <- NA               # 6138-0.0
```

We first check the missing rates of each variable.

```{r}
# count missing rates in percentage
missing_rates <- colMeans(is.na(data)) * 100
missing_rates <- missing_rates[missing_rates > 0]
missing_rates <- sort(missing_rates, decreasing = TRUE)

# print missing rates
print(missing_rates)
```

**Since imputation is time-consuming, we mainly focus on impute** `activity`, `hdl_chol`, `total_chol` and `education`.

Also get a description of the data

```{r}
Hmisc::describe(data)
```

Then, we should declare the type of categorical variables

```{r}
data$smoking <- as.factor(data$smoking)
data$sex <- as.factor(data$sex)
data$diabetes <- as.factor(data$diabetes)
data$ethnicity <- as.factor(data$ethnicity)
data$med_male <- as.factor(data$med_male)
data$med_female <- as.factor(data$med_female)
data$diagnosis <- as.factor(data$diagnosis)
data$education <- as.factor(data$education)
data$activity <- as.factor(data$activity)
```

Eventually, we should pay attention to the correlation between variables.

```{r, fig.width=12, fig.height=10}
data_numeric <- data[, sapply(data, is.numeric)]
# exclude eid
data_numeric <- subset(data_numeric, select = -eid)
cor_matrix <- cor(data_numeric, use = "pairwise.complete.obs")
corrplot(cor_matrix, 
         method = "color",      
         type = "upper",       
         order = "original",      
         addCoef.col = "black", 
         tl.col = "black",    
         tl.srt = 45,          
         diag = FALSE,
         na.label = "NA")
```


```{r label = "Finish Preprocessing"}
data_female = data %>% filter(sex == 0)
data_female_filtered = data_female %>% select(-eid, -sex, -med_male, -ethnicity, -birth_year, -birth_month, -max_workload, -max_heart_rate)
data_male = data %>% filter(sex == 1)
data_male_filtered = data_male %>% select(-eid, -sex, -med_female, -ethnicity, -birth_year, -birth_month, -max_workload, -max_heart_rate)
print(dim(data_female_filtered))
print(dim(data_male_filtered))
```

# MICE Imputation

```{r evaluate = FALSE}
data_small = data_female_filtered[1:200, ]  # for testing

# n=2000 takes 66s, n=4000 takes 135s -> n=40000 takes 1350s
start_time <- proc.time()
imp_small.mice = mice(data_small, m = 1, maxit = 50, seed = 1234, print=FALSE)
end_time <- proc.time()
run_time <- end_time - start_time
print(run_time)
```

## Run Imputation

We only need one imputed dataset for subsequent analysis.

```{r, label = "MICE Imputation-1", cache = TRUE}
start_time <- proc.time()
tryCatch({
    imp_female.mice <- mice(
        data_female_filtered, 
        m = 1, maxit = 50, seed = 1234, print=FALSE)
}, error = function(e) {
    print(e)
    return(NULL)
})
end_time <- proc.time()
run_time <- end_time - start_time
print(run_time)

save(imp_female.mice, file = "imp_female.mice.RData")
```

```{r, label = "MICE Imputation-2", cache = TRUE}
start_time <- proc.time()
tryCatch({
    imp_male.mice <- mice(
        data_male_filtered, 
        m = 1, maxit = 50, seed = 1234, print=FALSE)
}, error = function(e) {
    print(e)
    return(NULL)
})
end_time <- proc.time()
run_time <- end_time - start_time
print(run_time)

save(imp_male.mice, file = "imp_male.mice.RData")
```

## Check Imputation Results

For the sake of convenience, we only check the imputation results for females.

```{r}
plot(imp_female.mice)
```

```{r}
stripplot(imp_female.mice, pch = 20, cex = 1.2) 
```

```{r}
densityplot(imp_female.mice)
```

# MissForest Imputation

```{r}
library(parallel)
library(doParallel)
```

```{r evaluate = FALSE}
data_small = data_female_filtered[1:200, ]  # for testing

# n=2000 takes 15s, n=4000 takes 127s
start_time <- proc.time()
tryCatch({
    n_cores <- min(detectCores() - 1, 8)
    registerDoParallel(cores = n_cores)

    imp_small.missForest = missForest(data_small, 
        ntree = 100, maxiter = 10, verbose = TRUE,
        parallel = "variables")

    stopImplicitCluster()
}, error = function(e) {
    print(e)
    return(NULL)
})
end_time <- proc.time()
run_time <- end_time - start_time
print(run_time)
```

## Run Imputation

```{r, label = "MissForest Imputation-1", cache = TRUE}
start_time <- proc.time()
tryCatch({
    n_cores <- min(detectCores() - 1, 8)
    registerDoParallel(cores = n_cores)

    imp_female.missForest <- missForest(data_female_filtered, 
        ntree = 100, maxiter = 10, verbose = TRUE,
        parallel = "variables")

    stopImplicitCluster()
}, error = function(e) {
    print(e)
    return(NULL)
})
end_time <- proc.time()
run_time <- end_time - start_time
print(run_time)

save(imp_female.missForest, file = "imp_female.missForest.RData")
```

```{r, label = "MissForest Imputation-2", cache = TRUE}
start_time <- proc.time()
tryCatch({
    n_cores <- min(detectCores() - 1, 8)
    registerDoParallel(cores = n_cores)

    imp_male.missForest <- missForest(data_male_filtered, 
        ntree = 100, maxiter = 10, verbose = TRUE,
        parallel = "variables")

    stopImplicitCluster()
}, error = function(e) {
    print(e)
    return(NULL)
})
end_time <- proc.time()
run_time <- end_time - start_time
print(run_time)

save(imp_male.missForest, file = "imp_male.missForest.RData")
```

We can plot densities of both the observed and imputed values of all variables to see whether the imputations are reasonable. Differences in the densities between the observed and imputed values may suggest a problem that needs to be further checked.

```{r}
par(mfrow = c(1, 2))
for(col in c("hdl_chol", "total_chol")) {
    plot(density(data_male_filtered[[col]], na.rm = TRUE), 
            main = col,
            col = "blue", lwd = 2)
    lines(density(imp_male.missForest$ximp[[col]]), 
            col = "red", lwd = 2)
    legend("topright", 
            legend = c("original", "imputed"), 
            col = c("blue", "red"), 
            lwd = 2)
}

```


Fortunately, there is no significant difference between the densities of the original and imputed values for our case.