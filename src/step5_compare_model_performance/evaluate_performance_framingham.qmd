---
title: 'Evaluate Formula Performance: Framingham'
author: 'Mingcheng Hu'
format: 
    pdf:
        toc: true
        keep-tex: true
        include-in-header: 
            text: |
                \usepackage{fvextra}
                \DefineVerbatimEnvironment{Highlighting}{Verbatim}{breaklines,commandchars=\\\{\}}
                \DefineVerbatimEnvironment{OutputCode}{Verbatim}{breaklines,commandchars=\\\{\}}
---


```{r  output = FALSE}
library(tidyverse)
library(survival)
library(survcomp)

source("/work/users/y/u/yuukias/BIOS-Material/BIOS992/utils/csv_utils.r")
# * Don't use setwd() for Quarto documents!
# setwd("/work/users/y/u/yuukias/BIOS-Material/BIOS992/data")

adjust_type <- ifelse(exists("params"), params$adjust_type, "full") # options: "minimal", "partial", "full"
impute_type <- ifelse(exists("params"), params$impute_type, "imputed") # options: "unimputed", "imputed"
include_statin <- ifelse(exists("params"), params$include_statin, "no") # options: "yes", "no"

set.seed(1234)
```

```{r}
# string of parameters
adjust_type_str <- switch(adjust_type,
    minimal = "minimal",
    partial = "partial",
    full = "full"
)
print(paste0("Model Adjustment Type: ", adjust_type_str))
impute_type_str <- switch(impute_type,
    unimputed = "unimputed",
    imputed = "imputed"
)
print(paste0("Data Imputation Type: ", impute_type_str))
```

# Load Data

```{r}
if (include_statin == "yes") {
    data_test <- read.csv(paste0("/work/users/y/u/yuukias/BIOS-Material/BIOS992/data/test_data_", impute_type_str, "_statin.csv"),
        header = TRUE
    )
} else {
    data_test <- read.csv(paste0("/work/users/y/u/yuukias/BIOS-Material/BIOS992/data/test_data_", impute_type_str, ".csv"),
        header = TRUE
    )
}

data_test <- data_test[, -1] # the first column is the index generated by sklearn
(dim(data_test))
```

```{r}
data <- select_subset(data_test, type = adjust_type)
(dim(data))
```

```{r}
colnames(data)
```

```{r}
data <- tibble::as_tibble(data)
```

```{r label = "Full Data Specific Processing"}
# * There are some imputed ethnicity set to "e". We will exclude them at this time.
data <- data %>%
    filter(ethnicity != "e")

# * We also need to manually relevel the categorical variables
data <- data %>%
    mutate(
        # Set "Never" (0) as baseline for smoking
        smoking = factor(smoking,
            levels = c("0", "1", "2", "-3"),
            labels = c("Never", "Previous", "Current", "Prefer not to answer")
        ),

        # Set "No" (0) as baseline for diabetes
        diabetes = factor(diabetes,
            levels = c("0", "1", "-1", "-3"),
            labels = c("No", "Yes", "Do not know", "Prefer not to answer")
        ),

        # Ensure other categorical variables are properly factored
        ethnicity = factor(ethnicity,
            levels = c("1", "2", "3", "4", "5", "6"),
            labels = c("White", "Mixed", "Asian/Asian British", "Black/Black British", "Chinese", "Other")
        ),
        education = factor(education,
            levels = c("1", "2", "3", "4", "5", "6", "-7", "-3"),
            labels = c(
                "College/University degree", "A levels/AS levels",
                "O levels/GCSEs", "CSEs", "NVQ/HND/HNC",
                "Other professional", "None of the above",
                "Prefer not to answer"
            )
        ),
        activity = factor(activity,
            levels = c("0", "1", "2"),
            labels = c("Low", "Moderate", "High")
        ),
        sex = factor(sex,
            levels = c("0", "1"),
            labels = c("Female", "Male")
        ),
        hypertension_treatment = factor(hypertension_treatment,
            levels = c("0", "1"),
            labels = c("No", "Yes")
        )
    )
```

```{r}
time_col <- data$time
event_col <- data$event
# * Here for calculation, we will not scale key covariates!
data <- data %>%
    select(-c(time, event)) %>%
    mutate(across(where(is.numeric) & !any_of(c("age", "systolic_bp", "total_chol", "hdl_chol")), scale)) %>%
    mutate(
        time = time_col,
        event = event_col
    )
```

**Note now the interpretation of HR is different! For example, if HR=1.16 for the predictor in the univariate model fitted using scaled data, it means that each standard deviation increase is associated with 16% higher risk of event.**

```{r}
data_complete <- na.omit(data)
```

# Framingham Score

We will use the detailed parameter values (equation-based version) instead of the simplified ones (point-based version).

```{r}
# Ref Table2, all numeric variables should be log-transformed
calculate_framingham_score <- function(
    age, # in years
    sex, # "Male" or "Female"
    total_chol, # total cholesterol in mg/dL
    hdl_chol, # HDL cholesterol in mg/dL
    systolic_bp, # systolic blood pressure in mmHg
    hypertension_treatment, # TRUE/FALSE for blood pressure treatment
    smoking, # TRUE/FALSE for current smoking
    diabetes # TRUE/FALSE for diabetes
    ) {

    # We need to convert mmol/L to mg/dL for cholesterol
    total_chol <- total_chol * 38.67
    hdl_chol <- hdl_chol * 38.67

    smoking <- ifelse(smoking == "Current", 1, 0)
    diabetes <- ifelse(diabetes == "Yes", 1, 0)

    if (sex == "Female") {
        S0 <- 0.95012
        coef <- list(
            age = 2.32888,
            total_chol = 1.20904,
            hdl = -0.70833,  # HDL is beneficial
            sbp_untreated = 2.76157,
            sbp_treated = 2.82263,
            smoking = 0.52873,
            diabetes = 0.69154
        )
    } else {
        # Male
        S0 <- 0.88936
        coef <- list(
            age = 3.06117,
            total_chol = 1.12370,
            hdl = -0.93263,
            sbp_untreated = 1.93303,
            sbp_treated = 1.99881,
            smoking = 0.65451,
            diabetes = 0.57367
        )
    }

    # sum of beta * log(x)
    sum_bx <- coef$age * log(age) +
              coef$total_chol * log(total_chol) +
              coef$hdl * log(hdl_chol) +
              ifelse(hypertension_treatment == "Yes", coef$sbp_treated, coef$sbp_untreated) * log(systolic_bp) +
              coef$smoking * smoking +
              coef$diabetes * diabetes


    # * According to the paper, we also need to subtract the mean value.
    sum_bx_mean <- ifelse(sex == "Female", 26.1931, 23.9802)
    risk <- 1 - S0^exp(sum_bx - sum_bx_mean)  # This is 10-year risk
    return(risk * 100)  # We return the risk in percentage
}

data_complete <- data_complete %>%
    rowwise() %>%
    mutate(
        framingham_score = calculate_framingham_score(age, 
                                                      sex, 
                                                      total_chol, 
                                                      hdl_chol, 
                                                      systolic_bp, 
                                                      hypertension_treatment, 
                                                      smoking, 
                                                      diabetes)
    )
```

```{r}
head(data_complete$framingham_score)  # 10-year risk
```

# Formula Performance Evaluation

```{r}
concord <- concordance.index(data_complete$framingham_score, data_complete$time, data_complete$event)$c.index
lower <- concordance.index(data_complete$framingham_score, data_complete$time, data_complete$event)$lower
upper <- concordance.index(data_complete$framingham_score, data_complete$time, data_complete$event)$upper
print(paste0("Concordance of Framingham Score: ", round(concord, 3), " (", round(lower, 3), ", ", round(upper, 3), ")"))
```